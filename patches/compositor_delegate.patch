diff --git a/content/browser/compositor/gpu_process_transport_factory.cc b/content/browser/compositor/gpu_process_transport_factory.cc
index 713812a10..24ea8b088 100644
--- a/content/browser/compositor/gpu_process_transport_factory.cc
+++ b/content/browser/compositor/gpu_process_transport_factory.cc
@@ -204,6 +204,13 @@ GpuProcessTransportFactory::CreateSoftwareOutputDevice(
   if (command_line->HasSwitch(switches::kHeadless))
     return base::WrapUnique(new cc::SoftwareOutputDevice);
 
+  if (compositor->delegate()) {
+    std::unique_ptr<cc::SoftwareOutputDevice> output_device =
+      compositor->delegate()->CreateSoftwareOutputDevice(compositor);
+    if (output_device)
+      return output_device;
+  }
+  
 #if defined(USE_AURA)
   if (service_manager::ServiceManagerIsRemote()) {
     NOTREACHED();
diff --git a/ui/compositor/compositor.h b/ui/compositor/compositor.h
index 92696ade8..7da8159ff 100644
--- a/ui/compositor/compositor.h
+++ b/ui/compositor/compositor.h
@@ -18,6 +18,7 @@
 #include "base/time/time.h"
 #include "build/build_config.h"
 #include "cc/output/begin_frame_args.h"
+#include "cc/output/software_output_device.h"
 #include "cc/surfaces/surface_sequence.h"
 #include "cc/trees/layer_tree_host_client.h"
 #include "cc/trees/layer_tree_host_single_thread_client.h"
@@ -190,6 +191,15 @@ class COMPOSITOR_EXPORT CompositorLock
   DISALLOW_COPY_AND_ASSIGN(CompositorLock);
 };
 
+class COMPOSITOR_EXPORT CompositorDelegate {
+ public:
+  virtual std::unique_ptr<cc::SoftwareOutputDevice> CreateSoftwareOutputDevice(
+      ui::Compositor* compositor) = 0;
+
+ protected:
+  virtual ~CompositorDelegate() {}
+};
+
 // Compositor object to take care of GPU painting.
 // A Browser compositor object is responsible for generating the final
 // displayable form of pixels comprising a single widget's contents. It draws an
@@ -219,6 +229,9 @@ class COMPOSITOR_EXPORT Compositor
   // Schedules a redraw of the layer tree associated with this compositor.
   void ScheduleDraw();
 
+  CompositorDelegate* delegate() const { return delegate_; }
+  void SetDelegate(CompositorDelegate* delegate) { delegate_ = delegate; }
+
   // Sets the root of the layer tree drawn by this Compositor. The root layer
   // must have no parent. The compositor's root layer is reset if the root layer
   // is destroyed. NULL can be passed to reset the root layer, in which case the
@@ -398,6 +411,8 @@ class COMPOSITOR_EXPORT Compositor
   ui::ContextFactory* context_factory_;
   ui::ContextFactoryPrivate* context_factory_private_;
 
+  CompositorDelegate* delegate_ = nullptr;
+
   // The root of the Layer tree drawn by this compositor.
   Layer* root_layer_;
 
