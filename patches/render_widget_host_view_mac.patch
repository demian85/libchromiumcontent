diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index f2c270f4e..e21a4fba9 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -87,6 +87,7 @@
 #include "ui/gfx/geometry/rect_conversions.h"
 #include "ui/gfx/geometry/size_conversions.h"
 #include "ui/gfx/scoped_ns_graphics_context_save_gstate_mac.h"
+#include "ui/gl/gpu_switching_manager.h"
 #include "ui/gl/gl_switches.h"
 
 using content::BrowserAccessibility;
@@ -138,6 +139,11 @@ RenderWidgetHostView* GetRenderWidgetHostViewToUse(
 
 }  // namespace
 
+@interface NSWindow (AtomCustomMethods)
+- (BOOL)acceptsFirstMouse;
+- (BOOL)disableAutoHideCursor;
+@end
+
 // These are not documented, so use only after checking -respondsToSelector:.
 @interface NSApplication (UndocumentedSpeechMethods)
 - (void)speakString:(NSString*)string;
@@ -466,7 +472,9 @@ RenderWidgetHostViewMac::RenderWidgetHostViewMac(RenderWidgetHost* widget,
   background_layer_.reset([[CALayer alloc] init]);
   // Set the default color to be white. This is the wrong thing to do, but many
   // UI components expect this view to be opaque.
+#if 0
   [background_layer_ setBackgroundColor:CGColorGetConstantColor(kCGColorWhite)];
+#endif
   [cocoa_view_ setLayer:background_layer_];
   [cocoa_view_ setWantsLayer:YES];
 
@@ -1846,6 +1854,9 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 }
 
 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
+  if ([self.window respondsToSelector:@selector(acceptsFirstMouse)] &&
+      [self.window acceptsFirstMouse])
+    return YES;
   return [self acceptsMouseEventsWhenInactive];
 }
 
@@ -2002,6 +2013,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   if (EventIsReservedBySystem(theEvent))
     return NO;
 
+#if 0
   // If we return |NO| from this function, cocoa will send the key event to
   // the menu and only if the menu does not process the event to |keyDown:|. We
   // want to send the event to a renderer _before_ sending it to the menu, so
@@ -2015,6 +2027,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
     DCHECK(![[NSApp mainMenu] performKeyEquivalent:theEvent]);
     return NO;
   }
+#endif
 
   // Command key combinations are sent via performKeyEquivalent rather than
   // keyDown:. We just forward this on and if WebCore doesn't want to handle
@@ -2807,6 +2820,9 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 // move) for the given event. Customize here to be more selective about which
 // key presses to autohide on.
 + (BOOL)shouldAutohideCursorForEvent:(NSEvent*)event {
+  if ([event.window respondsToSelector:@selector(disableAutoHideCursor)] &&
+      [event.window disableAutoHideCursor])
+    return NO;
   return ([event type] == NSKeyDown &&
              !([event modifierFlags] & NSCommandKeyMask)) ? YES : NO;
 }
@@ -2963,9 +2979,11 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 // Since this implementation doesn't have to wait any IPC calls, this doesn't
 // make any key-typing jank. --hbono 7/23/09
 //
+#ifndef MAS_BUILD
 extern "C" {
 extern NSString *NSTextInputReplacementRangeAttributeName;
 }
+#endif
 
 - (NSArray *)validAttributesForMarkedText {
   // This code is just copied from WebKit except renaming variables.
@@ -2974,7 +2992,9 @@ extern NSString *NSTextInputReplacementRangeAttributeName;
         NSUnderlineStyleAttributeName,
         NSUnderlineColorAttributeName,
         NSMarkedClauseSegmentAttributeName,
+#ifndef MAS_BUILD
         NSTextInputReplacementRangeAttributeName,
+#endif
         nil]);
   }
   return validAttributesForMarkedText_.get();
@@ -3468,6 +3488,10 @@ extern NSString *NSTextInputReplacementRangeAttributeName;
 }
 
 - (BOOL)isOpaque {
+  bool wantsTransparent = ui::GpuSwitchingManager::UseTransparent() ||
+                          (self.window && ![self.window isOpaque]);
+  if (wantsTransparent)
+    return NO;
   return opaque_;
 }
 
